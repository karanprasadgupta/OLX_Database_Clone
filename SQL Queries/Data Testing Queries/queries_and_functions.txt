DELIMITER $$
create function recent_date_calc(datev Datetime )
returns int
DETERMINISTIC
BEGIN 
	DECLARE dayago int;
		set dayago=DATEDIFF(NOW(),datev);
    	return dayago;
END $$
DELIMITER ;

#v1
#price, ad title, cover image, location, days ago
create view product_view as
select adv.adv_id as "AD ID",adv.adv_title as Title,p.price as Price,concat(ar.city,', ',ar.state) as Area,recent_date_calc(adv.post_date) as `Uploaded (days ago)`,i.image as "Cover Image"
from advertisement as adv, product as p, area as ar, users as u,images as i
where adv.prdouct_id=p.idproduct and u.phone=adv.user_id and i.product_id=p.idproduct and i.img_no=1 and u.area_id=ar.area_id
Order by `Uploaded (days ago)`;

#1
#get alll images
set @product_id=10;
drop table if exists prod_img;
create table prod_img as
SELECT image FROM images where images.product_id=@product_id;
SELECT GROUP_CONCAT(DISTINCT image SEPARATOR ", ") AS img_url
  FROM prod_img;
drop table prod_img;


#2
#city filter
set @city="delhi";
set @state="";
select * 
from product_view
where `Area` like concat('%',@city,'%')  and `Area` like concat('%',@state,'%')
order by product_view.`Uploaded (days ago)`;

#3
#select a range of products from a view
set @n=10;
set @rowstart=10;
set @rowend=20;
with temp as (select pr.*,ROW_NUMBER() OVER(order by`Uploaded (days ago)`) AS `Row No` from product_view as pr)
select * from temp as t
where (t.`Row No`>=@rowstart && t.`Row No`>0) && (t.`Row No`<=@rowend && t.`Row No`<=(select count(*) from temp));

#4
#brand filter
SET @brands = '["Mercedes-Benz","Volvo","Honda","Ford"]';
DROP TABLE IF EXISTS brand;
CREATE TABLE brand (WITH RECURSIVE x AS (
    SELECT -1 AS n
    UNION
    SELECT x.n + 1
    FROM x
    WHERE x.n < JSON_LENGTH(@brands) - 1
)
(SELECT (JSON_EXTRACT(@brands, CONCAT('$[', x.n, ']'))) as brand
FROM x
WHERE x.n >= 0));
select c.* 
from cars as c, brand as b
where b.brand like concat('%',c.manufacturer,'%') ;
drop table brand;

#5
#select active and valid ads excluding own ads
set @userid='9132328837';
select pv.*
from product_view as pv inner join advertisement as ad on pv.`AD ID`=ad.adv_id
where ad.is_active='Y' and DATEDIFF(ad.expiry_date,NOW())>0 and (ad.prdouct_id not in (select adv.prdouct_id from advertisement as adv where adv.user_id=@userid)); 

#6
#sort by date, price-ltoh, price-htol
set @sorttype="htol";
select *
from product_view as pv
order by
case @sorttype when 'date' then pv.`Uploaded (days ago)` end asc,
case @sorttype when 'ltoh' then pv.`Price` end asc,
case @sorttype when 'htol' then pv.`Price` end desc;

#7
#offer price- make offer
#offer price- set make offer range for a product by a user
set @userid='9012473368';
set @adid=4;

DELIMITER $$
CREATE PROCEDURE `make offer`(IN offer_price INT,IN buyer CHAR(10),in adid int, OUT response int)
    READS SQL DATA
BEGIN
     declare product_price int; 
     select p.price into product_price
     from product as p where p.idproduct in (select ad.prdouct_id from advertisement as ad where ad.adv_id=adid);
	 IF(offer_price>=(product_price*0.7) and offer_price<=(product_price*1.3)) then select '1' into response;
     else select product_price into response;
     end if;
end $$
DELIMITER ;

#offer price- set make offer for a product buyer send a msg to seller
set @userid='9012473368';
set @adid=4;
set @offer_price=93211.00;
set @response = -1;
call olx.`make offer`(@offer_price,@userid, @adid, @response);
select @response;
set @seller= case when @response=1 then (select ad.user_id from advertisement ad where ad.adv_id=@adid) else NULL end;
insert into message (`sender_id`,
`reciever_id`,
`message`,
`timestamp`)
select@userid,@seller,@offer_price,NOW();

#8
#search products in similar price range of same category
set @adid=2;
set @prodid= (select ad.prdouct_id from advertisement ad where ad.adv_id=@adid);
with price_range(min_price,max_price) as 
(select 0.7*p.price,1.3*p.price from product as p where p.idproduct=@prodid),categor(id) as (select p.category_id from product as p where p.idproduct=@prodid) 
select pv.*
from price_range,categor, product_view as pv inner join advertisement as ad on pv.`AD ID`=ad.adv_id inner join product as pr on pr.idproduct=ad.prdouct_id
where (pv.Price>=price_range.min_price and pv.Price<=price_range.max_price) and pr.category_id=categor.id;

#9
#select blocked users who have posted unverified ads and reject their ads
set autocommit=0;
update advertisement
set advertisement.verification_status='Rejected'
where advertisement.user_id in (select u.phone
from users as u
where u.Status='Blocked');
SELECT * FROM advertisement inner join users on advertisement.user_id=users.phone;
rollback;

#10
#average price of cars of different brands and same fuel type
select cr.manufacturer,cr.fuel,avg(p.price) as `Avg Price`
from cars as cr inner join product as p
where cr.id_cars= p.idproduct
group by cr.manufacturer,cr.fuel
order by cr.fuel,`Avg Price`;


